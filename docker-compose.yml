services:
  db:
    image: postgres:17.4
    container_name: postgres
    environment:
      - POSTGRES_USER=${DB_MASTER_USER}
      - POSTGRES_PASSWORD=${DB_MASTER_PASSWORD}
      - POSTGRES_DB=${DB_MASTER_NAME}
    command: --max_connections=200
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - "postgres-data:/var/lib/postgresql/data"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmqq
    expose:
      - "5672:5672"
    ports:
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 7s
      timeout: 10s
      retries: 5
    restart: always
  web:
    build:
      context: .
    container_name: go
    expose:
      - "5432"
    environment:
      - DB_MASTER_USER=${DB_MASTER_USER}
      - DB_MASTER_PASSWORD=${DB_MASTER_PASSWORD}
      - DB_MASTER_HOST=db
      - DB_MASTER_PORT=${DB_MASTER_PORT}
      - DB_MASTER_NAME=${DB_MASTER_NAME}
      - QUEUE_URL=${QUEUE_URL}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  web-server:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginxx
    networks:
      - app-network
    depends_on:
      - web
    ports:
      - "443:443"
      - "80:80"
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
